CATEGORIES
expr, sentencia, tipo, sent_func

NODES
programa -> sentencia*;

defVar:sentencia -> nombre:string tipo ambito:string;
struct:sentencia -> string defVar*;
funcion:sentencia -> string parametro* defVar* sent_func* tipo;

intType:tipo -> ;
realType:tipo -> ;
charType:tipo -> ;
structType:tipo -> string;
arrayType:tipo -> tipo size:int;

parametro -> string tipo;

if:sent_func -> expr verdadero:sent_func* falso:sent_func*;
while:sent_func -> expr sent_func*;
for:sent_func -> i:asignacion condicion:expr cambio:asignacion sent_func*;
print:sent_func -> expr;
read:sent_func -> expr;
asignacion:sent_func -> izq:expr der:expr*;
invocacion:sent_func,expr -> nombre:string expr* ambito:string;
return:sent_func -> expr;

expresionLogica:expr -> izq:expr string der:expr;
expresionNumerica:expr -> izq:expr string der:expr;
accesoArray:expr -> izq:expr der:expr;
operacionUnaria:expr -> string der:expr;
accesoStruct:expr -> struct:expr string;
lintent:expr -> string;
lintreal:expr -> string;
lintchar:expr -> string;
cast:expr -> tipo expr;
var:expr -> string;